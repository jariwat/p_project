// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/jariwat/p_project/profile-service/models"
	profile "github.com/jariwat/p_project/profile-service/service/profile"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// ProfileRepository is an autogenerated mock type for the ProfileRepository type
type ProfileRepository struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: _a0
func (_m *ProfileRepository) CreateProfile(_a0 *models.Profile) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Profile) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProfile provides a mock function with given fields: profileId
func (_m *ProfileRepository) DeleteProfile(profileId *uuid.UUID) error {
	ret := _m.Called(profileId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*uuid.UUID) error); ok {
		r0 = rf(profileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchProfileById provides a mock function with given fields: profileId
func (_m *ProfileRepository) FetchProfileById(profileId *uuid.UUID) (*models.Profile, error) {
	ret := _m.Called(profileId)

	if len(ret) == 0 {
		panic("no return value specified for FetchProfileById")
	}

	var r0 *models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(*uuid.UUID) (*models.Profile, error)); ok {
		return rf(profileId)
	}
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *models.Profile); ok {
		r0 = rf(profileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(profileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchProfiles provides a mock function with given fields: params, paginator
func (_m *ProfileRepository) FetchProfiles(params profile.GetProfilesParams, paginator *models.Paginator) ([]*models.Profile, error) {
	ret := _m.Called(params, paginator)

	if len(ret) == 0 {
		panic("no return value specified for FetchProfiles")
	}

	var r0 []*models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(profile.GetProfilesParams, *models.Paginator) ([]*models.Profile, error)); ok {
		return rf(params, paginator)
	}
	if rf, ok := ret.Get(0).(func(profile.GetProfilesParams, *models.Paginator) []*models.Profile); ok {
		r0 = rf(params, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(profile.GetProfilesParams, *models.Paginator) error); ok {
		r1 = rf(params, paginator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: _a0
func (_m *ProfileRepository) UpdateProfile(_a0 *models.Profile) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Profile) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProfileRepository creates a new instance of ProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileRepository {
	mock := &ProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
