// Package profile provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package profile

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ProfileGender.
const (
	ProfileGenderFEMALE ProfileGender = "FEMALE"
	ProfileGenderMALE   ProfileGender = "MALE"
)

// Defines values for ProfilesGender.
const (
	ProfilesGenderFEMALE ProfilesGender = "FEMALE"
	ProfilesGenderMALE   ProfilesGender = "MALE"
)

// Defines values for UpsertProfileGender.
const (
	FEMALE UpsertProfileGender = "FEMALE"
	MALE   UpsertProfileGender = "MALE"
)

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// Profile defines model for Profile.
type Profile struct {
	// Class The class of the profile
	Class *string `json:"class,omitempty"`

	// FirstName The first name of the profile
	FirstName *string `json:"first_name,omitempty"`

	// Gender The gender of the profile
	Gender *ProfileGender `json:"gender,omitempty"`

	// Id The unique identifier of the profile
	Id *openapi_types.UUID `json:"id,omitempty"`

	// LastName The last name of the profile
	LastName *string `json:"last_name,omitempty"`

	// MiddleName The middle name of the profile
	MiddleName *string  `json:"middle_name,omitempty"`
	Skills     *[]Skill `json:"skills,omitempty"`
}

// ProfileGender The gender of the profile
type ProfileGender string

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Data *Profile `json:"data,omitempty"`
}

// Profiles defines model for Profiles.
type Profiles struct {
	// Class The class of the profile
	Class *string `json:"class,omitempty"`

	// FirstName The first name of the profile
	FirstName *string `json:"first_name,omitempty"`

	// Gender The gender of the profile
	Gender *ProfilesGender `json:"gender,omitempty"`

	// Id The unique identifier of the profile
	Id *openapi_types.UUID `json:"id,omitempty"`

	// LastName The last name of the profile
	LastName *string `json:"last_name,omitempty"`

	// MiddleName The middle name of the profile
	MiddleName *string `json:"middle_name,omitempty"`
}

// ProfilesGender The gender of the profile
type ProfilesGender string

// ProfilesPaginationResponse defines model for ProfilesPaginationResponse.
type ProfilesPaginationResponse struct {
	Data *[]Profiles `json:"data,omitempty"`

	// Page Current page number
	Page *int `json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int `json:"per_page,omitempty"`

	// TotalPages Total number of pages
	TotalPages *int `json:"total_pages,omitempty"`

	// TotalRows Total rows of users
	TotalRows *int `json:"total_rows,omitempty"`
}

// Skill defines model for Skill.
type Skill struct {
	// Detail Additional details about the skill
	Detail *string `json:"detail,omitempty"`

	// Skill The skill associated with the profile
	Skill *string `json:"skill,omitempty"`
}

// Success defines model for Success.
type Success struct {
	// Id The ID of the updated resource
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Message success
	Message string `json:"message"`
}

// UpsertProfile defines model for UpsertProfile.
type UpsertProfile struct {
	// Class The class of the profile
	Class string `json:"class"`

	// FirstName The first name of the profile
	FirstName string              `json:"first_name"`
	Gender    UpsertProfileGender `json:"gender"`

	// LastName The last name of the profile
	LastName string `json:"last_name"`

	// MiddleName The middle name of the profile
	MiddleName *string       `json:"middle_name,omitempty"`
	Skills     []UpsertSkill `json:"skills"`
}

// UpsertProfileGender defines model for UpsertProfile.Gender.
type UpsertProfileGender string

// UpsertSkill defines model for UpsertSkill.
type UpsertSkill struct {
	// Detail Additional details about the skill
	Detail string `json:"detail"`

	// Skill The name of the skill
	Skill string `json:"skill"`
}

// GetProfilesParams defines parameters for GetProfiles.
type GetProfilesParams struct {
	SearchWord *string `form:"search_word,omitempty" json:"search_word,omitempty"`
	Page       *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage    *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostProfileJSONRequestBody defines body for PostProfile for application/json ContentType.
type PostProfileJSONRequestBody = UpsertProfile

// PutProfileIdJSONRequestBody defines body for PutProfileId for application/json ContentType.
type PutProfileIdJSONRequestBody = UpsertProfile

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create profile
	// (POST /profile)
	PostProfile(c *gin.Context)
	// Delete profile
	// (DELETE /profile/{id})
	DeleteProfileId(c *gin.Context, id openapi_types.UUID)
	// Get profile By ID
	// (GET /profile/{id})
	GetProfileId(c *gin.Context, id openapi_types.UUID)
	// Update profile
	// (PUT /profile/{id})
	PutProfileId(c *gin.Context, id openapi_types.UUID)
	// Get profiles
	// (GET /profiles)
	GetProfiles(c *gin.Context, params GetProfilesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostProfile operation middleware
func (siw *ServerInterfaceWrapper) PostProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfile(c)
}

// DeleteProfileId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProfileId(c, id)
}

// GetProfileId operation middleware
func (siw *ServerInterfaceWrapper) GetProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileId(c, id)
}

// PutProfileId operation middleware
func (siw *ServerInterfaceWrapper) PutProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProfileId(c, id)
}

// GetProfiles operation middleware
func (siw *ServerInterfaceWrapper) GetProfiles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfilesParams

	// ------------- Optional query parameter "search_word" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_word", c.Request.URL.Query(), &params.SearchWord)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search_word: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfiles(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/profile", wrapper.PostProfile)
	router.DELETE(options.BaseURL+"/profile/:id", wrapper.DeleteProfileId)
	router.GET(options.BaseURL+"/profile/:id", wrapper.GetProfileId)
	router.PUT(options.BaseURL+"/profile/:id", wrapper.PutProfileId)
	router.GET(options.BaseURL+"/profiles", wrapper.GetProfiles)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYQW/bOBP9KwS/76jEcuKku76lTbZw0V0Ym+2pCAJGHNvsSqQyJJMagf/7giPJlivK",
	"9qHddNucTGjIN8OZN4+kn3hmitJo0M7y8RO32QIKQcMrRINhUKIpAZ0C+lyAtWIOYSjBZqhKp4zm42o+",
	"a8wJd8sS+Jhbh0rP+WqVcIR7rxAkH39cw9ysEj5FM1M5dH1lubC26+mvBTAyMTNjbgGsrAESDp9FUQYo",
	"/oYmXHQDSfhMoXW3WhQQxyY7C/ZdDt6ZhY6hz0FLwDhyZYugal+ErPx+8f6KJ/y3KxrctN3Vpo47JeOu",
	"vFb3HpiSoJ2aqajXNfjw5HR0xhM+M1gIx8fceyVj3nKxM3PBvDdxlwZi0IWSMocd4NWEvfDRktu/VZ4T",
	"lZSDggb/R5jxMf/fYNMBg5r+g+swPayrgQSiWBKH6w/m7hNkjm/I+yfY0mgbIbEUTuzz13TALg/2pT9e",
	"+uPb9Mcu1k3FXGkR3Oyn+EG9taZzp70SXkZPljceEbRjwcq0L+4A2zsarnGUdjAHJCTA2zjaHwQQMkTh",
	"shKQkLcg0ximM07khBprumCsowvg1bQ25lk/JprHXshgC4DeAn4BGIkyVspKzbpVAydU3nV7IaUKQ5Gz",
	"aopl4s54R4wiId3i09XngMmUZtOlWxjNhJbsnXgQ14TZq8ZxEpOJCWtNpoQDyR6VW/RyeYpmjqIoAu5B",
	"rL72WQY2IqV9MjG5bHrJl5ICQrDGY9YRCBidnb86gl9+vTsansjTIzE6Oz8anZyfD0fDV6M0TQ/Rj97b",
	"la0DbzvdfDv8rvWhtIDuR71x9Z4TP+tFpip3/3WmTZNWkdr5Wec3qdmxDuIm0mBth/8NxWmXoetrn8K0",
	"E9isrrfZTU9YoPTMhECcco2DUHl2MZ3whD8A2iq04XF6nIbQTQlalIqP+elxenzKwynpFpTPQdnqY2Nd",
	"+A35puN6IgO6setmr4IF614buaRmN9qBplWiLHOV0brBJxsCaN6ChzFsc4HdyolDD/ShujlQ0Cdp+tWc",
	"N3JObrdLW6eGZQhBtkMmz76i5+p1HPE70Q4wMPka8AGQNRMTbn1RCFwGpaSY1k0fjE0pB09Kriqi5uCg",
	"W9FL+l7neyKJDigKcOF2MP74xBXtXrgFT3ilQZzOmu2qJK197jmVVjfPW8EqE99XBasqbCoYRDLSfm/B",
	"/TCV+vKhG8ncdF0xEvGQlpN09O0rVpfBMm0cmxmvn4EstiILRMjyFlzDFPZ6ySaX9EDxMbn2z8CXn+9M",
	"qK/y35WifKCYomcCpWiPvtgeutx7wOWGLxYEZovbR4OBDpttdS428eX1O3mzTsJM+NxFH+G9IM3TPA4U",
	"e9T+C7oW+6MjUsr3yjp63rf+xXjRuC2No9Zb/RMAAP//AZRnb1oYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
